#!/usr/bin/env node

const os = require('os');
const http = require('http');
const debug = require('debug')('expressjs-template:server');
const config = require('config');
const app = require('../app');
const logger = require('../src/logger');

// Set port.
app.set('port', config.port);

// Create http server.
const server = http.createServer(app);

// Log server's address.
function serverInfo(port) {
  const interfaces = os.networkInterfaces();
  let info = '';
  Object.keys(interfaces).forEach((i) => {
    interfaces[i].forEach((iface) => {
      if (iface.family === 'IPv4') info += `\x1b[34m${iface.address}:${port}\x1b[0m\n`;
    });
  });
  logger.info(`Server started on: \n${info}`);
}

// Listen to port.
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = `Port ${config.port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const address = server.address();
  serverInfo(address.port);
  debug(`Listening on port: ${address.port}`);
}

server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);
